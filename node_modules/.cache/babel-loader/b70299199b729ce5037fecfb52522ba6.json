{"ast":null,"code":"import { BufferGeometry, FileLoader, Float32BufferAttribute, Loader } from 'three';\n\nclass PDBLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  } // Based on CanvasMol PDB parser\n\n\n  parse(text) {\n    function trim(text) {\n      return text.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function capitalize(text) {\n      return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();\n    }\n\n    function hash(s, e) {\n      return 's' + Math.min(s, e) + 'e' + Math.max(s, e);\n    }\n\n    function parseBond(start, length, satom, i) {\n      const eatom = parseInt(lines[i].substr(start, length));\n\n      if (eatom) {\n        const h = hash(satom, eatom);\n\n        if (_bhash[h] === undefined) {\n          _bonds.push([satom - 1, eatom - 1, 1]);\n\n          _bhash[h] = _bonds.length - 1;\n        } else {// doesn't really work as almost all PDBs\n          // have just normal bonds appearing multiple\n          // times instead of being double/triple bonds\n          // bonds[bhash[h]][2] += 1;\n        }\n      }\n    }\n\n    function buildGeometry() {\n      const build = {\n        geometryAtoms: new BufferGeometry(),\n        geometryBonds: new BufferGeometry(),\n        json: {\n          atoms: atoms\n        }\n      };\n      const geometryAtoms = build.geometryAtoms;\n      const geometryBonds = build.geometryBonds;\n      const verticesAtoms = [];\n      const colorsAtoms = [];\n      const verticesBonds = []; // atoms\n\n      for (let i = 0, l = atoms.length; i < l; i++) {\n        const atom = atoms[i];\n        const x = atom[0];\n        const y = atom[1];\n        const z = atom[2];\n        verticesAtoms.push(x, y, z);\n        const r = atom[3][0] / 255;\n        const g = atom[3][1] / 255;\n        const b = atom[3][2] / 255;\n        colorsAtoms.push(r, g, b);\n      } // bonds\n\n\n      for (let i = 0, l = _bonds.length; i < l; i++) {\n        const bond = _bonds[i];\n        const start = bond[0];\n        const end = bond[1];\n        const startAtom = _atomMap[start];\n        const endAtom = _atomMap[end];\n        let x = startAtom[0];\n        let y = startAtom[1];\n        let z = startAtom[2];\n        verticesBonds.push(x, y, z);\n        x = endAtom[0];\n        y = endAtom[1];\n        z = endAtom[2];\n        verticesBonds.push(x, y, z);\n      } // build geometry\n\n\n      geometryAtoms.setAttribute('position', new Float32BufferAttribute(verticesAtoms, 3));\n      geometryAtoms.setAttribute('color', new Float32BufferAttribute(colorsAtoms, 3));\n      geometryBonds.setAttribute('position', new Float32BufferAttribute(verticesBonds, 3));\n      return build;\n    }\n\n    const CPK = {\n      h: [255, 255, 255],\n      he: [217, 255, 255],\n      li: [204, 128, 255],\n      be: [194, 255, 0],\n      b: [255, 181, 181],\n      c: [144, 144, 144],\n      n: [48, 80, 248],\n      o: [255, 13, 13],\n      f: [144, 224, 80],\n      ne: [179, 227, 245],\n      na: [171, 92, 242],\n      mg: [138, 255, 0],\n      al: [191, 166, 166],\n      si: [240, 200, 160],\n      p: [255, 128, 0],\n      s: [255, 255, 48],\n      cl: [31, 240, 31],\n      ar: [128, 209, 227],\n      k: [143, 64, 212],\n      ca: [61, 255, 0],\n      sc: [230, 230, 230],\n      ti: [191, 194, 199],\n      v: [166, 166, 171],\n      cr: [138, 153, 199],\n      mn: [156, 122, 199],\n      fe: [224, 102, 51],\n      co: [240, 144, 160],\n      ni: [80, 208, 80],\n      cu: [200, 128, 51],\n      zn: [125, 128, 176],\n      ga: [194, 143, 143],\n      ge: [102, 143, 143],\n      as: [189, 128, 227],\n      se: [255, 161, 0],\n      br: [166, 41, 41],\n      kr: [92, 184, 209],\n      rb: [112, 46, 176],\n      sr: [0, 255, 0],\n      y: [148, 255, 255],\n      zr: [148, 224, 224],\n      nb: [115, 194, 201],\n      mo: [84, 181, 181],\n      tc: [59, 158, 158],\n      ru: [36, 143, 143],\n      rh: [10, 125, 140],\n      pd: [0, 105, 133],\n      ag: [192, 192, 192],\n      cd: [255, 217, 143],\n      in: [166, 117, 115],\n      sn: [102, 128, 128],\n      sb: [158, 99, 181],\n      te: [212, 122, 0],\n      i: [148, 0, 148],\n      xe: [66, 158, 176],\n      cs: [87, 23, 143],\n      ba: [0, 201, 0],\n      la: [112, 212, 255],\n      ce: [255, 255, 199],\n      pr: [217, 255, 199],\n      nd: [199, 255, 199],\n      pm: [163, 255, 199],\n      sm: [143, 255, 199],\n      eu: [97, 255, 199],\n      gd: [69, 255, 199],\n      tb: [48, 255, 199],\n      dy: [31, 255, 199],\n      ho: [0, 255, 156],\n      er: [0, 230, 117],\n      tm: [0, 212, 82],\n      yb: [0, 191, 56],\n      lu: [0, 171, 36],\n      hf: [77, 194, 255],\n      ta: [77, 166, 255],\n      w: [33, 148, 214],\n      re: [38, 125, 171],\n      os: [38, 102, 150],\n      ir: [23, 84, 135],\n      pt: [208, 208, 224],\n      au: [255, 209, 35],\n      hg: [184, 184, 208],\n      tl: [166, 84, 77],\n      pb: [87, 89, 97],\n      bi: [158, 79, 181],\n      po: [171, 92, 0],\n      at: [117, 79, 69],\n      rn: [66, 130, 150],\n      fr: [66, 0, 102],\n      ra: [0, 125, 0],\n      ac: [112, 171, 250],\n      th: [0, 186, 255],\n      pa: [0, 161, 255],\n      u: [0, 143, 255],\n      np: [0, 128, 255],\n      pu: [0, 107, 255],\n      am: [84, 92, 242],\n      cm: [120, 92, 227],\n      bk: [138, 79, 227],\n      cf: [161, 54, 212],\n      es: [179, 31, 212],\n      fm: [179, 31, 186],\n      md: [179, 13, 166],\n      no: [189, 13, 135],\n      lr: [199, 0, 102],\n      rf: [204, 0, 89],\n      db: [209, 0, 79],\n      sg: [217, 0, 69],\n      bh: [224, 0, 56],\n      hs: [230, 0, 46],\n      mt: [235, 0, 38],\n      ds: [235, 0, 38],\n      rg: [235, 0, 38],\n      cn: [235, 0, 38],\n      uut: [235, 0, 38],\n      uuq: [235, 0, 38],\n      uup: [235, 0, 38],\n      uuh: [235, 0, 38],\n      uus: [235, 0, 38],\n      uuo: [235, 0, 38]\n    };\n    const atoms = [];\n    const _bonds = [];\n    const _bhash = {};\n    const _atomMap = {}; // parse\n\n    const lines = text.split('\\n');\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      if (lines[i].substr(0, 4) === 'ATOM' || lines[i].substr(0, 6) === 'HETATM') {\n        const x = parseFloat(lines[i].substr(30, 7));\n        const y = parseFloat(lines[i].substr(38, 7));\n        const z = parseFloat(lines[i].substr(46, 7));\n        const index = parseInt(lines[i].substr(6, 5)) - 1;\n        let e = trim(lines[i].substr(76, 2)).toLowerCase();\n\n        if (e === '') {\n          e = trim(lines[i].substr(12, 2)).toLowerCase();\n        }\n\n        const atomData = [x, y, z, CPK[e], capitalize(e)];\n        atoms.push(atomData);\n        _atomMap[index] = atomData;\n      } else if (lines[i].substr(0, 6) === 'CONECT') {\n        const satom = parseInt(lines[i].substr(6, 5));\n        parseBond(11, 5, satom, i);\n        parseBond(16, 5, satom, i);\n        parseBond(21, 5, satom, i);\n        parseBond(26, 5, satom, i);\n      }\n    } // build and return geometry\n\n\n    return buildGeometry();\n  }\n\n}\n\nexport { PDBLoader };","map":{"version":3,"sources":["C:/Users/aamir/code/chemifyApp/node_modules/three/examples/jsm/loaders/PDBLoader.js"],"names":["BufferGeometry","FileLoader","Float32BufferAttribute","Loader","PDBLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","trim","replace","capitalize","charAt","toUpperCase","substr","toLowerCase","hash","s","Math","min","max","parseBond","start","length","satom","i","eatom","parseInt","lines","h","_bhash","undefined","_bonds","push","buildGeometry","build","geometryAtoms","geometryBonds","json","atoms","verticesAtoms","colorsAtoms","verticesBonds","l","atom","x","y","z","r","g","b","bond","end","startAtom","_atomMap","endAtom","setAttribute","CPK","he","li","be","c","n","o","f","ne","na","mg","al","si","p","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cn","uut","uuq","uup","uuh","uus","uuo","split","parseFloat","index","atomData"],"mappings":"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","sourcesContent":["import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader\n} from 'three';\n\nclass PDBLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t// Based on CanvasMol PDB parser\n\n\tparse( text ) {\n\n\t\tfunction trim( text ) {\n\n\t\t\treturn text.replace( /^\\s\\s*/, '' ).replace( /\\s\\s*$/, '' );\n\n\t\t}\n\n\t\tfunction capitalize( text ) {\n\n\t\t\treturn text.charAt( 0 ).toUpperCase() + text.substr( 1 ).toLowerCase();\n\n\t\t}\n\n\t\tfunction hash( s, e ) {\n\n\t\t\treturn 's' + Math.min( s, e ) + 'e' + Math.max( s, e );\n\n\t\t}\n\n\t\tfunction parseBond( start, length, satom, i ) {\n\n\t\t\tconst eatom = parseInt( lines[ i ].substr( start, length ) );\n\n\t\t\tif ( eatom ) {\n\n\t\t\t\tconst h = hash( satom, eatom );\n\n\t\t\t\tif ( _bhash[ h ] === undefined ) {\n\n\t\t\t\t\t_bonds.push( [ satom - 1, eatom - 1, 1 ] );\n\t\t\t\t\t_bhash[ h ] = _bonds.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// doesn't really work as almost all PDBs\n\t\t\t\t\t// have just normal bonds appearing multiple\n\t\t\t\t\t// times instead of being double/triple bonds\n\t\t\t\t\t// bonds[bhash[h]][2] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildGeometry() {\n\n\t\t\tconst build = {\n\t\t\t\tgeometryAtoms: new BufferGeometry(),\n\t\t\t\tgeometryBonds: new BufferGeometry(),\n\t\t\t\tjson: {\n\t\t\t\t\tatoms: atoms\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst geometryAtoms = build.geometryAtoms;\n\t\t\tconst geometryBonds = build.geometryBonds;\n\n\t\t\tconst verticesAtoms = [];\n\t\t\tconst colorsAtoms = [];\n\t\t\tconst verticesBonds = [];\n\n\t\t\t// atoms\n\n\t\t\tfor ( let i = 0, l = atoms.length; i < l; i ++ ) {\n\n\t\t\t\tconst atom = atoms[ i ];\n\n\t\t\t\tconst x = atom[ 0 ];\n\t\t\t\tconst y = atom[ 1 ];\n\t\t\t\tconst z = atom[ 2 ];\n\n\t\t\t\tverticesAtoms.push( x, y, z );\n\n\t\t\t\tconst r = atom[ 3 ][ 0 ] / 255;\n\t\t\t\tconst g = atom[ 3 ][ 1 ] / 255;\n\t\t\t\tconst b = atom[ 3 ][ 2 ] / 255;\n\n\t\t\t\tcolorsAtoms.push( r, g, b );\n\n\t\t\t}\n\n\t\t\t// bonds\n\n\t\t\tfor ( let i = 0, l = _bonds.length; i < l; i ++ ) {\n\n\t\t\t\tconst bond = _bonds[ i ];\n\n\t\t\t\tconst start = bond[ 0 ];\n\t\t\t\tconst end = bond[ 1 ];\n\n\t\t\t\tconst startAtom = _atomMap[ start ];\n\t\t\t\tconst endAtom = _atomMap[ end ];\n\n\t\t\t\tlet x = startAtom[ 0 ];\n\t\t\t\tlet y = startAtom[ 1 ];\n\t\t\t\tlet z = startAtom[ 2 ];\n\n\t\t\t\tverticesBonds.push( x, y, z );\n\n\t\t\t\tx = endAtom[ 0 ];\n\t\t\t\ty = endAtom[ 1 ];\n\t\t\t\tz = endAtom[ 2 ];\n\n\t\t\t\tverticesBonds.push( x, y, z );\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tgeometryAtoms.setAttribute( 'position', new Float32BufferAttribute( verticesAtoms, 3 ) );\n\t\t\tgeometryAtoms.setAttribute( 'color', new Float32BufferAttribute( colorsAtoms, 3 ) );\n\n\t\t\tgeometryBonds.setAttribute( 'position', new Float32BufferAttribute( verticesBonds, 3 ) );\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tconst CPK = { h: [ 255, 255, 255 ], he: [ 217, 255, 255 ], li: [ 204, 128, 255 ], be: [ 194, 255, 0 ], b: [ 255, 181, 181 ], c: [ 144, 144, 144 ], n: [ 48, 80, 248 ], o: [ 255, 13, 13 ], f: [ 144, 224, 80 ], ne: [ 179, 227, 245 ], na: [ 171, 92, 242 ], mg: [ 138, 255, 0 ], al: [ 191, 166, 166 ], si: [ 240, 200, 160 ], p: [ 255, 128, 0 ], s: [ 255, 255, 48 ], cl: [ 31, 240, 31 ], ar: [ 128, 209, 227 ], k: [ 143, 64, 212 ], ca: [ 61, 255, 0 ], sc: [ 230, 230, 230 ], ti: [ 191, 194, 199 ], v: [ 166, 166, 171 ], cr: [ 138, 153, 199 ], mn: [ 156, 122, 199 ], fe: [ 224, 102, 51 ], co: [ 240, 144, 160 ], ni: [ 80, 208, 80 ], cu: [ 200, 128, 51 ], zn: [ 125, 128, 176 ], ga: [ 194, 143, 143 ], ge: [ 102, 143, 143 ], as: [ 189, 128, 227 ], se: [ 255, 161, 0 ], br: [ 166, 41, 41 ], kr: [ 92, 184, 209 ], rb: [ 112, 46, 176 ], sr: [ 0, 255, 0 ], y: [ 148, 255, 255 ], zr: [ 148, 224, 224 ], nb: [ 115, 194, 201 ], mo: [ 84, 181, 181 ], tc: [ 59, 158, 158 ], ru: [ 36, 143, 143 ], rh: [ 10, 125, 140 ], pd: [ 0, 105, 133 ], ag: [ 192, 192, 192 ], cd: [ 255, 217, 143 ], in: [ 166, 117, 115 ], sn: [ 102, 128, 128 ], sb: [ 158, 99, 181 ], te: [ 212, 122, 0 ], i: [ 148, 0, 148 ], xe: [ 66, 158, 176 ], cs: [ 87, 23, 143 ], ba: [ 0, 201, 0 ], la: [ 112, 212, 255 ], ce: [ 255, 255, 199 ], pr: [ 217, 255, 199 ], nd: [ 199, 255, 199 ], pm: [ 163, 255, 199 ], sm: [ 143, 255, 199 ], eu: [ 97, 255, 199 ], gd: [ 69, 255, 199 ], tb: [ 48, 255, 199 ], dy: [ 31, 255, 199 ], ho: [ 0, 255, 156 ], er: [ 0, 230, 117 ], tm: [ 0, 212, 82 ], yb: [ 0, 191, 56 ], lu: [ 0, 171, 36 ], hf: [ 77, 194, 255 ], ta: [ 77, 166, 255 ], w: [ 33, 148, 214 ], re: [ 38, 125, 171 ], os: [ 38, 102, 150 ], ir: [ 23, 84, 135 ], pt: [ 208, 208, 224 ], au: [ 255, 209, 35 ], hg: [ 184, 184, 208 ], tl: [ 166, 84, 77 ], pb: [ 87, 89, 97 ], bi: [ 158, 79, 181 ], po: [ 171, 92, 0 ], at: [ 117, 79, 69 ], rn: [ 66, 130, 150 ], fr: [ 66, 0, 102 ], ra: [ 0, 125, 0 ], ac: [ 112, 171, 250 ], th: [ 0, 186, 255 ], pa: [ 0, 161, 255 ], u: [ 0, 143, 255 ], np: [ 0, 128, 255 ], pu: [ 0, 107, 255 ], am: [ 84, 92, 242 ], cm: [ 120, 92, 227 ], bk: [ 138, 79, 227 ], cf: [ 161, 54, 212 ], es: [ 179, 31, 212 ], fm: [ 179, 31, 186 ], md: [ 179, 13, 166 ], no: [ 189, 13, 135 ], lr: [ 199, 0, 102 ], rf: [ 204, 0, 89 ], db: [ 209, 0, 79 ], sg: [ 217, 0, 69 ], bh: [ 224, 0, 56 ], hs: [ 230, 0, 46 ], mt: [ 235, 0, 38 ], ds: [ 235, 0, 38 ], rg: [ 235, 0, 38 ], cn: [ 235, 0, 38 ], uut: [ 235, 0, 38 ], uuq: [ 235, 0, 38 ], uup: [ 235, 0, 38 ], uuh: [ 235, 0, 38 ], uus: [ 235, 0, 38 ], uuo: [ 235, 0, 38 ] };\n\n\t\tconst atoms = [];\n\n\t\tconst _bonds = [];\n\t\tconst _bhash = {};\n\t\tconst _atomMap = {};\n\n\t\t// parse\n\n\t\tconst lines = text.split( '\\n' );\n\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tif ( lines[ i ].substr( 0, 4 ) === 'ATOM' || lines[ i ].substr( 0, 6 ) === 'HETATM' ) {\n\n\t\t\t\tconst x = parseFloat( lines[ i ].substr( 30, 7 ) );\n\t\t\t\tconst y = parseFloat( lines[ i ].substr( 38, 7 ) );\n\t\t\t\tconst z = parseFloat( lines[ i ].substr( 46, 7 ) );\n\t\t\t\tconst index = parseInt( lines[ i ].substr( 6, 5 ) ) - 1;\n\n\t\t\t\tlet e = trim( lines[ i ].substr( 76, 2 ) ).toLowerCase();\n\n\t\t\t\tif ( e === '' ) {\n\n\t\t\t\t\te = trim( lines[ i ].substr( 12, 2 ) ).toLowerCase();\n\n\t\t\t\t}\n\n\t\t\t\tconst atomData = [ x, y, z, CPK[ e ], capitalize( e ) ];\n\n\t\t\t\tatoms.push( atomData );\n\t\t\t\t_atomMap[ index ] = atomData;\n\n\t\t\t} else if ( lines[ i ].substr( 0, 6 ) === 'CONECT' ) {\n\n\t\t\t\tconst satom = parseInt( lines[ i ].substr( 6, 5 ) );\n\n\t\t\t\tparseBond( 11, 5, satom, i );\n\t\t\t\tparseBond( 16, 5, satom, i );\n\t\t\t\tparseBond( 21, 5, satom, i );\n\t\t\t\tparseBond( 26, 5, satom, i );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build and return geometry\n\n\t\treturn buildGeometry();\n\n\t}\n\n}\n\nexport { PDBLoader };\n"]},"metadata":{},"sourceType":"module"}